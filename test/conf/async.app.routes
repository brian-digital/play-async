# microservice specific routes


# asyncmvc

# NORMAL ACTION - How controllers are normally defined.
GET     /normalAction                    uk.gov.hmrc.play.asyncmvc.example.controllers.ExampleNormalController.normalAction

#============================
# Async actions.

# 1 - Example controller showing how the async Action wrapper can be applied to check if an asyncmvc Future is currently running for the user.
GET     /capture                         uk.gov.hmrc.play.asyncmvc.example.controllers.ExampleAsyncController.captureController

# 2 - Example POST controller to show how an asyncmvc.connectors.async Future can be off-lined.
POST    /submit                          uk.gov.hmrc.play.asyncmvc.example.controllers.ExampleAsyncController.submitController

# 3 - Example Poll used to wait for the offline task.
GET     /poll                            uk.gov.hmrc.play.asyncmvc.example.controllers.ExampleAsyncController.poll

# 4 - Client blocks for a small amount of time waiting for the asyncmvc.connectors.async Future to complete, before routing to the poll screen.
GET     /wait                            uk.gov.hmrc.play.asyncmvc.example.controllers.ExampleAsyncController.waitForTask

#============================
# Demo Stock REST service.
GET     /stock/:id                        uk.gov.hmrc.play.asyncmvc.example.controllers.StockController.getStock(id:Long)
